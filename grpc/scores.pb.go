// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v3.12.4
// source: scores.proto

package grpc

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DateRangeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To            *timestamp.Timestamp   `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DateRangeRequest) Reset() {
	*x = DateRangeRequest{}
	mi := &file_scores_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DateRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateRangeRequest) ProtoMessage() {}

func (x *DateRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scores_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateRangeRequest.ProtoReflect.Descriptor instead.
func (*DateRangeRequest) Descriptor() ([]byte, []int) {
	return file_scores_proto_rawDescGZIP(), []int{0}
}

func (x *DateRangeRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *DateRangeRequest) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type RatingCategoryScore struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RatingCategoryID   int64                  `protobuf:"varint,1,opt,name=ratingCategoryID,proto3" json:"ratingCategoryID,omitempty"`
	RatingCategoryName string                 `protobuf:"bytes,2,opt,name=ratingCategoryName,proto3" json:"ratingCategoryName,omitempty"`
	Score              float32                `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RatingCategoryScore) Reset() {
	*x = RatingCategoryScore{}
	mi := &file_scores_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RatingCategoryScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingCategoryScore) ProtoMessage() {}

func (x *RatingCategoryScore) ProtoReflect() protoreflect.Message {
	mi := &file_scores_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingCategoryScore.ProtoReflect.Descriptor instead.
func (*RatingCategoryScore) Descriptor() ([]byte, []int) {
	return file_scores_proto_rawDescGZIP(), []int{1}
}

func (x *RatingCategoryScore) GetRatingCategoryID() int64 {
	if x != nil {
		return x.RatingCategoryID
	}
	return 0
}

func (x *RatingCategoryScore) GetRatingCategoryName() string {
	if x != nil {
		return x.RatingCategoryName
	}
	return ""
}

func (x *RatingCategoryScore) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ScoreByTicket struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TicketId            int64                  `protobuf:"varint,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	RatingCategoryScore []*RatingCategoryScore `protobuf:"bytes,2,rep,name=ratingCategoryScore,proto3" json:"ratingCategoryScore,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ScoreByTicket) Reset() {
	*x = ScoreByTicket{}
	mi := &file_scores_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreByTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreByTicket) ProtoMessage() {}

func (x *ScoreByTicket) ProtoReflect() protoreflect.Message {
	mi := &file_scores_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreByTicket.ProtoReflect.Descriptor instead.
func (*ScoreByTicket) Descriptor() ([]byte, []int) {
	return file_scores_proto_rawDescGZIP(), []int{2}
}

func (x *ScoreByTicket) GetTicketId() int64 {
	if x != nil {
		return x.TicketId
	}
	return 0
}

func (x *ScoreByTicket) GetRatingCategoryScore() []*RatingCategoryScore {
	if x != nil {
		return x.RatingCategoryScore
	}
	return nil
}

type PeriodScoreWithRatings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To            *timestamp.Timestamp   `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Score         float32                `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
	Ratings       int32                  `protobuf:"varint,4,opt,name=ratings,proto3" json:"ratings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeriodScoreWithRatings) Reset() {
	*x = PeriodScoreWithRatings{}
	mi := &file_scores_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeriodScoreWithRatings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodScoreWithRatings) ProtoMessage() {}

func (x *PeriodScoreWithRatings) ProtoReflect() protoreflect.Message {
	mi := &file_scores_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodScoreWithRatings.ProtoReflect.Descriptor instead.
func (*PeriodScoreWithRatings) Descriptor() ([]byte, []int) {
	return file_scores_proto_rawDescGZIP(), []int{3}
}

func (x *PeriodScoreWithRatings) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *PeriodScoreWithRatings) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *PeriodScoreWithRatings) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PeriodScoreWithRatings) GetRatings() int32 {
	if x != nil {
		return x.Ratings
	}
	return 0
}

type CategoryScoreOverTime struct {
	state                  protoimpl.MessageState    `protogen:"open.v1"`
	CategoryName           string                    `protobuf:"bytes,1,opt,name=categoryName,proto3" json:"categoryName,omitempty"`
	PeriodScoreWithRatings []*PeriodScoreWithRatings `protobuf:"bytes,2,rep,name=periodScoreWithRatings,proto3" json:"periodScoreWithRatings,omitempty"`
	TotalScore             float32                   `protobuf:"fixed32,3,opt,name=totalScore,proto3" json:"totalScore,omitempty"`
	TotalRating            int32                     `protobuf:"varint,4,opt,name=totalRating,proto3" json:"totalRating,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CategoryScoreOverTime) Reset() {
	*x = CategoryScoreOverTime{}
	mi := &file_scores_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryScoreOverTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryScoreOverTime) ProtoMessage() {}

func (x *CategoryScoreOverTime) ProtoReflect() protoreflect.Message {
	mi := &file_scores_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryScoreOverTime.ProtoReflect.Descriptor instead.
func (*CategoryScoreOverTime) Descriptor() ([]byte, []int) {
	return file_scores_proto_rawDescGZIP(), []int{4}
}

func (x *CategoryScoreOverTime) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *CategoryScoreOverTime) GetPeriodScoreWithRatings() []*PeriodScoreWithRatings {
	if x != nil {
		return x.PeriodScoreWithRatings
	}
	return nil
}

func (x *CategoryScoreOverTime) GetTotalScore() float32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *CategoryScoreOverTime) GetTotalRating() int32 {
	if x != nil {
		return x.TotalRating
	}
	return 0
}

type OverAllQualityScoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OverAllScore  float32                `protobuf:"fixed32,1,opt,name=overAllScore,proto3" json:"overAllScore,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OverAllQualityScoreResponse) Reset() {
	*x = OverAllQualityScoreResponse{}
	mi := &file_scores_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OverAllQualityScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverAllQualityScoreResponse) ProtoMessage() {}

func (x *OverAllQualityScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scores_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverAllQualityScoreResponse.ProtoReflect.Descriptor instead.
func (*OverAllQualityScoreResponse) Descriptor() ([]byte, []int) {
	return file_scores_proto_rawDescGZIP(), []int{5}
}

func (x *OverAllQualityScoreResponse) GetOverAllScore() float32 {
	if x != nil {
		return x.OverAllScore
	}
	return 0
}

type PeriodScore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To            *timestamp.Timestamp   `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Score         float32                `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeriodScore) Reset() {
	*x = PeriodScore{}
	mi := &file_scores_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeriodScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodScore) ProtoMessage() {}

func (x *PeriodScore) ProtoReflect() protoreflect.Message {
	mi := &file_scores_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodScore.ProtoReflect.Descriptor instead.
func (*PeriodScore) Descriptor() ([]byte, []int) {
	return file_scores_proto_rawDescGZIP(), []int{6}
}

func (x *PeriodScore) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *PeriodScore) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *PeriodScore) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type GetPeriodOverPeriodScoreChangeResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CurrentPeriod   *PeriodScore           `protobuf:"bytes,1,opt,name=CurrentPeriod,proto3" json:"CurrentPeriod,omitempty"`
	PreviousPeriod  *PeriodScore           `protobuf:"bytes,2,opt,name=PreviousPeriod,proto3" json:"PreviousPeriod,omitempty"`
	ScoreDifference float32                `protobuf:"fixed32,3,opt,name=ScoreDifference,proto3" json:"ScoreDifference,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetPeriodOverPeriodScoreChangeResponse) Reset() {
	*x = GetPeriodOverPeriodScoreChangeResponse{}
	mi := &file_scores_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeriodOverPeriodScoreChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeriodOverPeriodScoreChangeResponse) ProtoMessage() {}

func (x *GetPeriodOverPeriodScoreChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scores_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeriodOverPeriodScoreChangeResponse.ProtoReflect.Descriptor instead.
func (*GetPeriodOverPeriodScoreChangeResponse) Descriptor() ([]byte, []int) {
	return file_scores_proto_rawDescGZIP(), []int{7}
}

func (x *GetPeriodOverPeriodScoreChangeResponse) GetCurrentPeriod() *PeriodScore {
	if x != nil {
		return x.CurrentPeriod
	}
	return nil
}

func (x *GetPeriodOverPeriodScoreChangeResponse) GetPreviousPeriod() *PeriodScore {
	if x != nil {
		return x.PreviousPeriod
	}
	return nil
}

func (x *GetPeriodOverPeriodScoreChangeResponse) GetScoreDifference() float32 {
	if x != nil {
		return x.ScoreDifference
	}
	return 0
}

var File_scores_proto protoreflect.FileDescriptor

var file_scores_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x67, 0x72, 0x70, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6e, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x79, 0x0a, 0x0d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a,
	0x13, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x13, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x16, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x54, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x16, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x41, 0x0a, 0x1b, 0x4f, 0x76, 0x65, 0x72, 0x41,
	0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x6c,
	0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6f, 0x76,
	0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x7f, 0x0a, 0x0b, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x26,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x39, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0e, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x32, 0xee, 0x02, 0x0a, 0x06, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x5e, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x41,
	0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x76,
	0x65, 0x72, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scores_proto_rawDescOnce sync.Once
	file_scores_proto_rawDescData = file_scores_proto_rawDesc
)

func file_scores_proto_rawDescGZIP() []byte {
	file_scores_proto_rawDescOnce.Do(func() {
		file_scores_proto_rawDescData = protoimpl.X.CompressGZIP(file_scores_proto_rawDescData)
	})
	return file_scores_proto_rawDescData
}

var file_scores_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_scores_proto_goTypes = []any{
	(*DateRangeRequest)(nil),                       // 0: grpc.DateRangeRequest
	(*RatingCategoryScore)(nil),                    // 1: grpc.RatingCategoryScore
	(*ScoreByTicket)(nil),                          // 2: grpc.ScoreByTicket
	(*PeriodScoreWithRatings)(nil),                 // 3: grpc.PeriodScoreWithRatings
	(*CategoryScoreOverTime)(nil),                  // 4: grpc.CategoryScoreOverTime
	(*OverAllQualityScoreResponse)(nil),            // 5: grpc.OverAllQualityScoreResponse
	(*PeriodScore)(nil),                            // 6: grpc.PeriodScore
	(*GetPeriodOverPeriodScoreChangeResponse)(nil), // 7: grpc.GetPeriodOverPeriodScoreChangeResponse
	(*timestamp.Timestamp)(nil),                    // 8: google.protobuf.Timestamp
}
var file_scores_proto_depIdxs = []int32{
	8,  // 0: grpc.DateRangeRequest.from:type_name -> google.protobuf.Timestamp
	8,  // 1: grpc.DateRangeRequest.to:type_name -> google.protobuf.Timestamp
	1,  // 2: grpc.ScoreByTicket.ratingCategoryScore:type_name -> grpc.RatingCategoryScore
	8,  // 3: grpc.PeriodScoreWithRatings.from:type_name -> google.protobuf.Timestamp
	8,  // 4: grpc.PeriodScoreWithRatings.to:type_name -> google.protobuf.Timestamp
	3,  // 5: grpc.CategoryScoreOverTime.periodScoreWithRatings:type_name -> grpc.PeriodScoreWithRatings
	8,  // 6: grpc.PeriodScore.from:type_name -> google.protobuf.Timestamp
	8,  // 7: grpc.PeriodScore.to:type_name -> google.protobuf.Timestamp
	6,  // 8: grpc.GetPeriodOverPeriodScoreChangeResponse.CurrentPeriod:type_name -> grpc.PeriodScore
	6,  // 9: grpc.GetPeriodOverPeriodScoreChangeResponse.PreviousPeriod:type_name -> grpc.PeriodScore
	0,  // 10: grpc.Scores.GetScoreByTicket:input_type -> grpc.DateRangeRequest
	0,  // 11: grpc.Scores.GetAggregatedCategoryScoresOverTime:input_type -> grpc.DateRangeRequest
	0,  // 12: grpc.Scores.GetOverAllQualityScore:input_type -> grpc.DateRangeRequest
	0,  // 13: grpc.Scores.GetPeriodOverPeriodScoreChange:input_type -> grpc.DateRangeRequest
	2,  // 14: grpc.Scores.GetScoreByTicket:output_type -> grpc.ScoreByTicket
	4,  // 15: grpc.Scores.GetAggregatedCategoryScoresOverTime:output_type -> grpc.CategoryScoreOverTime
	5,  // 16: grpc.Scores.GetOverAllQualityScore:output_type -> grpc.OverAllQualityScoreResponse
	7,  // 17: grpc.Scores.GetPeriodOverPeriodScoreChange:output_type -> grpc.GetPeriodOverPeriodScoreChangeResponse
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_scores_proto_init() }
func file_scores_proto_init() {
	if File_scores_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scores_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scores_proto_goTypes,
		DependencyIndexes: file_scores_proto_depIdxs,
		MessageInfos:      file_scores_proto_msgTypes,
	}.Build()
	File_scores_proto = out.File
	file_scores_proto_rawDesc = nil
	file_scores_proto_goTypes = nil
	file_scores_proto_depIdxs = nil
}
