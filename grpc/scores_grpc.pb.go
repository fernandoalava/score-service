// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: scores.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Scores_GetScoreByTicket_FullMethodName                    = "/grpc.Scores/GetScoreByTicket"
	Scores_GetAggregatedCategoryScoresOverTime_FullMethodName = "/grpc.Scores/GetAggregatedCategoryScoresOverTime"
	Scores_GetOverAllQualityScore_FullMethodName              = "/grpc.Scores/GetOverAllQualityScore"
	Scores_GetPeriodOverPeriodScoreChange_FullMethodName      = "/grpc.Scores/GetPeriodOverPeriodScoreChange"
)

// ScoresClient is the client API for Scores service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoresClient interface {
	GetScoreByTicket(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScoreByTicket], error)
	GetAggregatedCategoryScoresOverTime(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CategoryScoreOverTime], error)
	GetOverAllQualityScore(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OverAllQualityScoreResponse, error)
	GetPeriodOverPeriodScoreChange(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*GetPeriodOverPeriodScoreChangeResponse, error)
}

type scoresClient struct {
	cc grpc.ClientConnInterface
}

func NewScoresClient(cc grpc.ClientConnInterface) ScoresClient {
	return &scoresClient{cc}
}

func (c *scoresClient) GetScoreByTicket(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScoreByTicket], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Scores_ServiceDesc.Streams[0], Scores_GetScoreByTicket_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DateRangeRequest, ScoreByTicket]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Scores_GetScoreByTicketClient = grpc.ServerStreamingClient[ScoreByTicket]

func (c *scoresClient) GetAggregatedCategoryScoresOverTime(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CategoryScoreOverTime], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Scores_ServiceDesc.Streams[1], Scores_GetAggregatedCategoryScoresOverTime_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DateRangeRequest, CategoryScoreOverTime]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Scores_GetAggregatedCategoryScoresOverTimeClient = grpc.ServerStreamingClient[CategoryScoreOverTime]

func (c *scoresClient) GetOverAllQualityScore(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*OverAllQualityScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OverAllQualityScoreResponse)
	err := c.cc.Invoke(ctx, Scores_GetOverAllQualityScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoresClient) GetPeriodOverPeriodScoreChange(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*GetPeriodOverPeriodScoreChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPeriodOverPeriodScoreChangeResponse)
	err := c.cc.Invoke(ctx, Scores_GetPeriodOverPeriodScoreChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoresServer is the server API for Scores service.
// All implementations must embed UnimplementedScoresServer
// for forward compatibility.
type ScoresServer interface {
	GetScoreByTicket(*DateRangeRequest, grpc.ServerStreamingServer[ScoreByTicket]) error
	GetAggregatedCategoryScoresOverTime(*DateRangeRequest, grpc.ServerStreamingServer[CategoryScoreOverTime]) error
	GetOverAllQualityScore(context.Context, *DateRangeRequest) (*OverAllQualityScoreResponse, error)
	GetPeriodOverPeriodScoreChange(context.Context, *DateRangeRequest) (*GetPeriodOverPeriodScoreChangeResponse, error)
	mustEmbedUnimplementedScoresServer()
}

// UnimplementedScoresServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScoresServer struct{}

func (UnimplementedScoresServer) GetScoreByTicket(*DateRangeRequest, grpc.ServerStreamingServer[ScoreByTicket]) error {
	return status.Errorf(codes.Unimplemented, "method GetScoreByTicket not implemented")
}
func (UnimplementedScoresServer) GetAggregatedCategoryScoresOverTime(*DateRangeRequest, grpc.ServerStreamingServer[CategoryScoreOverTime]) error {
	return status.Errorf(codes.Unimplemented, "method GetAggregatedCategoryScoresOverTime not implemented")
}
func (UnimplementedScoresServer) GetOverAllQualityScore(context.Context, *DateRangeRequest) (*OverAllQualityScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverAllQualityScore not implemented")
}
func (UnimplementedScoresServer) GetPeriodOverPeriodScoreChange(context.Context, *DateRangeRequest) (*GetPeriodOverPeriodScoreChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeriodOverPeriodScoreChange not implemented")
}
func (UnimplementedScoresServer) mustEmbedUnimplementedScoresServer() {}
func (UnimplementedScoresServer) testEmbeddedByValue()                {}

// UnsafeScoresServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoresServer will
// result in compilation errors.
type UnsafeScoresServer interface {
	mustEmbedUnimplementedScoresServer()
}

func RegisterScoresServer(s grpc.ServiceRegistrar, srv ScoresServer) {
	// If the following call pancis, it indicates UnimplementedScoresServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Scores_ServiceDesc, srv)
}

func _Scores_GetScoreByTicket_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DateRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScoresServer).GetScoreByTicket(m, &grpc.GenericServerStream[DateRangeRequest, ScoreByTicket]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Scores_GetScoreByTicketServer = grpc.ServerStreamingServer[ScoreByTicket]

func _Scores_GetAggregatedCategoryScoresOverTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DateRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScoresServer).GetAggregatedCategoryScoresOverTime(m, &grpc.GenericServerStream[DateRangeRequest, CategoryScoreOverTime]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Scores_GetAggregatedCategoryScoresOverTimeServer = grpc.ServerStreamingServer[CategoryScoreOverTime]

func _Scores_GetOverAllQualityScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoresServer).GetOverAllQualityScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scores_GetOverAllQualityScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoresServer).GetOverAllQualityScore(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scores_GetPeriodOverPeriodScoreChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoresServer).GetPeriodOverPeriodScoreChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scores_GetPeriodOverPeriodScoreChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoresServer).GetPeriodOverPeriodScoreChange(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Scores_ServiceDesc is the grpc.ServiceDesc for Scores service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scores_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Scores",
	HandlerType: (*ScoresServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOverAllQualityScore",
			Handler:    _Scores_GetOverAllQualityScore_Handler,
		},
		{
			MethodName: "GetPeriodOverPeriodScoreChange",
			Handler:    _Scores_GetPeriodOverPeriodScoreChange_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetScoreByTicket",
			Handler:       _Scores_GetScoreByTicket_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAggregatedCategoryScoresOverTime",
			Handler:       _Scores_GetAggregatedCategoryScoresOverTime_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scores.proto",
}
